<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.4</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>net.wuxianjie</groupId>
  <artifactId>spring-rest-api</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <name>spring-rest-api</name>
  <description>spring-rest-api</description>

  <properties>
    <java.version>11</java.version>

    <jasypt.version>3.0.4</jasypt.version>
  </properties>

  <dependencies>
    <!-- 一个小而全的 Java 工具类库 -->
    <dependency>
      <groupId>cn.hutool</groupId>
      <artifactId>hutool-all</artifactId>
      <version>5.8.8</version>
    </dependency>

    <!-- MyBatis Spring Boot Starter -->
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>2.2.2</version>
    </dependency>

    <!-- MySQL JDBC Type 4 驱动程序 -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>

    <!--
      Spring Boot 配置文件值的加密库
      https://www.codejava.net/frameworks/spring-boot/spring-boot-password-encryption
    -->
    <dependency>
      <groupId>com.github.ulisesbocchio</groupId>
      <artifactId>jasypt-spring-boot-starter</artifactId>
      <version>${jasypt.version}</version>
    </dependency>

    <!-- Bean 属性验证库, 包含 JSR-303 的实现 (hibernate-validator) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- 使用 Spring MVC, Jackson 和 Tomcat 嵌入式 Web 服务器 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Security 身份验证 (Authentication) 及访问控制 (Authorization) 框架 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- 通过 Spring AOP 和 AspectJ 实现面向切面编程 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>

    <!-- Spring Boot 单元测试 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!--
      注解处理器，生成程序中拥有 `@ConfigurationProperties` 注解类的元数据:
      可为在 IDE 中编辑 `application.properties` 和 `application.yaml` 时提供代码补全和文档说明
    -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Java 注解库, 可避免冗余的样板代码 -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Java 音频视频编码器 -->
    <dependency>
      <groupId>ws.schild</groupId>
      <artifactId>jave-all-deps</artifactId>
      <version>3.3.1</version>
    </dependency>

    <!-- 海康 SDK 依赖 -->
    <dependency>
      <groupId>hikvision.sdk</groupId>
      <artifactId>jna</artifactId>
      <version>6.1.9.4</version>
      <scope>system</scope>
      <systemPath>${basedir}/lib/jna.jar</systemPath>
    </dependency>
    <dependency>
      <groupId>hikvision.sdk</groupId>
      <artifactId>examples</artifactId>
      <version>6.1.9.4</version>
      <scope>system</scope>
      <systemPath>${basedir}/lib/examples.jar</systemPath>
    </dependency>
  </dependencies>

  <build>
    <finalName>spring-rest-api</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <includeSystemScope>true</includeSystemScope>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>

      <!--
        Jasypt Maven 插件
        https://www.codejava.net/frameworks/spring-boot/spring-boot-password-encryption
        https://xie.infoq.cn/article/5cc0e4e3e189715df487843f4
        1. 加密:
          `mvn jasypt:encrypt-value -Djasypt.encryptor.password=k3y -Djasypt.plugin.value=passw0rd`
           ->
          `ENC(Yu19V+NLCvTZd3TvWGSLCMgFcB0ZAE9r2begwr0yLl9bw/FlMUs9cbxRy1/eTlDh)`
        2. 解密:
          `mvn jasypt:decrypt-value -Djasypt.encryptor.password=k3y -Djasypt.plugin.value=Yu19V+NLCvTZd3TvWGSLCMgFcB0ZAE9r2begwr0yLl9bw/FlMUs9cbxRy1/eTlDh`
        3. 加密 Spring Boot 配置文件内 `DEC()` 占位符中的值:
          `mvn jasypt:encrypt -Djasypt.encryptor.password=k3y`
        3.1 使用新的加密密码重新加密:
          `mvn jasypt:reencrypt -Djasypt.plugin.old.password=k3y -Djasypt.encryptor.password=new-k3y`
        3.2 打印解密值:
          `mvn jasypt:decrypt -Djasypt.encryptor.password=k3y`
        5. 使用 Jasypt 运行 Spring Boot 应用程序:
          `java -Djasypt.encryptor.password=k3y –jar spring-rest-api.jar`
      -->
      <plugin>
        <groupId>com.github.ulisesbocchio</groupId>
        <artifactId>jasypt-maven-plugin</artifactId>
        <version>${jasypt.version}</version>
        <configuration>
          <!-- 默认为 `src/main/resources/application.properties` -->
          <path>file:src/main/resources/application.yml</path>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
