<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.wuxianjie.springrestapi.user.UserMapper">
  <select id="selectById" resultType="net.wuxianjie.springrestapi.user.User">
    select id,
           remark,
           username,
           nickname,
           hashed_password as hashedPassword,
           is_enabled      as enabled,
           role_id         as roleId
    from user
    where id = #{userId}
  </select>

  <select id="selectByUsername" resultType="net.wuxianjie.springrestapi.shared.security.core.AuthData">
    select u.username,
           u.hashed_password as hashedPassword,
           r.menus,
           u.is_enabled      as enabled,
           u.id              as userId,
           u.nickname,
           r.id              as roleId
    from user u
           join role r on r.id = u.role_id
    where u.username = #{username}
  </select>

  <select id="selectExistsByUsername" resultType="java.lang.Boolean">
    select exists(select 1 from user where username = #{username})
  </select>

  <select id="selectCountByUsernameLikeNicknameLikeEnabled" resultType="java.lang.Integer">
    select count(1)
    from user
    <where>
      <if test="username != null">and username like #{username}</if>
      <if test="nickname != null">and nickname like #{nickname}</if>
      <if test="enabled != null">and is_enabled = #{enabled}</if>
    </where>
  </select>

  <select id="selectByUsernameLikeNicknameLikeEnabledOrderByUpdatedAtDesc" resultType="java.util.LinkedHashMap">
    select
    u.id as userId,
    u.updated_at as updatedAt,
    u.remark,
    u.username,
    u.nickname,
    u.is_enabled as enabled,
    u.role_id as roleId,
    r.name as role,
    r.menus
    from user u
    join role r on r.id = u.role_id
    <where>
      <if test="q.username != null">and u.username like #{q.username}</if>
      <if test="q.nickname != null">and u.nickname like #{q.nickname}</if>
      <if test="q.enabled != null">and u.is_enabled = #{q.enabled}</if>
    </where>
    order by u.updated_at desc
    limit #{p.offset}, #{p.pageSize}
  </select>

  <insert id="insert">
    insert into user (created_at, updated_at, remark, username, nickname, hashed_password, is_enabled, role_id)
    values (#{createdAt}, #{updatedAt}, #{remark}, #{username}, #{nickname}, #{hashedPassword}, #{enabled}, #{roleId})
  </insert>

  <update id="updateById">
    update user
    set updated_at      = #{updatedAt},
        remark          = #{remark},
        nickname        = #{nickname},
        hashed_password =#{hashedPassword},
        is_enabled      = #{enabled},
        role_id         = #{roleId}
    where id = #{id}
  </update>
</mapper>
